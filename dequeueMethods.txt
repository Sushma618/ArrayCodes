void print(deque<int> &dq) {
    if(dq.size()==0){
        cout << -1 << endl;
    }else{
    int x=dq.size();
    while(x!=0){
        cout << dq.front() << " ";
        dq.push_back(dq.front());
        dq.pop_front();
        x--;
    }
    cout<<endl;
    
    } 
}



void add_in_front(deque<int> &A,int x)
{
	//Your code here
	A.push_front(x);

}



void add_in_back(deque<int> &A,int x)
{
	//Your code here
	A.push_back(x);

}




void remove_from_back(deque <int> &A)
{
   //Your code here
   if(A.empty()){
       cout<< -1;

}else{
    A.pop_back();
}
}



void remove_from_front(deque<int> &A)
{
  if(A.empty()){
      cout<< -1;
  }else{
      A.pop_front();
  }
}

void sort(deque<int> &A)
{
 sort(A.begin(), A.end());
}


void reverse(deque<int> &A)
{
	reverse(A.begin(), A.end());
}


int size(deque<int> &A)
{
 return A.size();
}


int element_at_front(deque <int> &A)
{
  return A.front();
}


int element_at_back(deque <int> &A)
{
        return A.back();

}